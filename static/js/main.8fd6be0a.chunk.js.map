{"version":3,"sources":["components/CommentInput.js","reducers/comments.js","containers/CommentInput.js","components/Comment.js","components/CommentList.js","containers/CommentList.js","containers/CommentApp.js","index.js"],"names":["CommentInput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","username","content","textarea","focus","e","onUserNameInputBlur","target","value","setState","onSubmit","createdTime","Date","_this2","react_default","a","createElement","className","onBlur","handleUsernameBlur","bind","onChange","handleUsernameChange","ref","handleContentChange","onClick","handleSubmit","Component","defaultProps","CommentInputContainer","_loadUsername","localStorage","getItem","setItem","comment","alert","comments","newComments","concat","toConsumableArray","JSON","stringify","CommentInput_CommentInput","_saveUsername","handleSubmitComment","connect","dispatch","type","addComment","Comment","timeString","_updateTimeString","_timer","setInterval","clearInterval","duration","now","Math","round","max","onDeleteComment","index","replace","dangerouslySetInnerHTML","__html","_getProcessedContent","handleDeleteComment","CommentList","map","Comment_Comment","key","CommentListContainer","_loadComments","parse","initComments","slice","CommentList_CommentList","commentIndex","deleteComment","CommentApp","containers_CommentInput","containers_CommentList","store","createStore","action","ReactDOM","render","es","CommentApp_CommentApp","document","getElementById"],"mappings":"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","file":"static/js/main.8fd6be0a.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class CommentInput extends Component {\r\n    static propTypes = {\r\n        username: PropTypes.any,\r\n        onSubmit: PropTypes.func,\r\n        onUserNameInputBlur: PropTypes.func\r\n    };\r\n\r\n    static defaultProps = {\r\n        username: ''\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: props.username,\r\n            content: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.textarea.focus()\r\n    }\r\n\r\n    handleUsernameBlur(e) {\r\n        if (this.props.onUserNameInputBlur) {\r\n            this.props.onUserNameInputBlur(e.target.value)\r\n        }\r\n    }\r\n\r\n    handleUsernameChange(e) {\r\n        this.setState({\r\n            username: e.target.value\r\n        })\r\n    }\r\n\r\n    handleContentChange(e) {\r\n        this.setState({\r\n            content: e.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit() {\r\n        if (this.props.onSubmit) {\r\n            this.props.onSubmit({\r\n                username: this.state.username,\r\n                content: this.state.content,\r\n                createdTime: +new Date()\r\n            })\r\n        }\r\n        this.setState({content: ''})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"comment-input\">\r\n                <div className=\"comment-field\">\r\n                    <span className=\"comment-field-name\">用户名：</span>\r\n                    <div className=\"comment-field-input\">\r\n                        <input\r\n                            value={this.state.username}\r\n                            onBlur={this.handleUsernameBlur.bind(this)}\r\n                            onChange={this.handleUsernameChange.bind(this)}/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"comment-field\">\r\n                    <span className=\"comment-field-name\">评论内容：</span>\r\n                    <div className=\"comment-field-input\">\r\n                        <textarea\r\n                            ref={((textarea) => {\r\n                                this.textarea = textarea\r\n                            })}\r\n                            value={this.state.content}\r\n                            onChange={this.handleContentChange.bind(this)}/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"comment-field-button\">\r\n                    <button onClick={this.handleSubmit.bind(this)}>发布</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","const INIT_COMMENTS = 'INIT_COMMENTS';\r\nconst ADD_COMMENT = 'ADD_COMMENT';\r\nconst DELETE_COMMENT = 'DELETE_COMMENT';\r\n\r\nexport default function (state, action) {\r\n    if (!state) {\r\n        state = {comments: []};\r\n    }\r\n    switch (action.type) {\r\n        case INIT_COMMENTS:\r\n            return {comments: action.comments};\r\n        case ADD_COMMENT:\r\n            return {\r\n                comments: [...state.comments, action.comment]\r\n            };\r\n        case DELETE_COMMENT:\r\n            return {\r\n                comments: [\r\n                    ...state.comments.slice(0, action.commentIndex),\r\n                    ...state.comments.slice(action.commentIndex + 1)\r\n                ]\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const initComments = (comments) => {\r\n    return {type: INIT_COMMENTS, comments}\r\n};\r\n\r\nexport const addComment = (comment) => {\r\n    return {type: ADD_COMMENT, comment}\r\n};\r\nexport const deleteComment = (commentIndex) => {\r\n    return {type: DELETE_COMMENT, commentIndex}\r\n};","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {connect} from 'react-redux';\r\nimport CommentInput from '../components/CommentInput';\r\nimport {addComment} from \"../reducers/comments\";\r\n\r\nclass CommentInputContainer extends Component {\r\n    static propTypes = {\r\n        comments: PropTypes.array,\r\n        onSubmit: PropTypes.func\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            username: ''\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        this._loadUsername()\r\n    }\r\n\r\n    _loadUsername() {\r\n        const username = localStorage.getItem('username');\r\n        if (username) {\r\n            this.setState({username})\r\n        }\r\n    }\r\n\r\n    _saveUsername(username) {\r\n        localStorage.setItem('username', username);\r\n    }\r\n\r\n    handleSubmitComment(comment) {\r\n        if (!comment) {\r\n            return\r\n        }\r\n        if (!comment.username) {\r\n            return alert('请输入用户名')\r\n        }\r\n        if (!comment.content) {\r\n            return alert('请输入评论内容')\r\n        }\r\n        const {comments} = this.props;\r\n        const newComments = [...comments, comment];\r\n        localStorage.setItem('comments', JSON.stringify(newComments));\r\n        if (this.props.onSubmit) {\r\n            this.props.onSubmit(comment)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <CommentInput\r\n                username={this.state.username}\r\n                onUserNameInputBlur={this._saveUsername.bind(this)}\r\n                onSubmit={this.handleSubmitComment.bind(this)}/>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        comments: state.comments\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSubmit: (comment) => {\r\n            dispatch(addComment(comment))\r\n        }\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentInputContainer)","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Comment extends Component {\r\n    static propTypes = {\r\n        comment: PropTypes.object.isRequired,\r\n        onDeleteComment: PropTypes.func,\r\n        index: PropTypes.number\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            timeString: ''\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        this._updateTimeString();\r\n        this._timer = setInterval(\r\n            this._updateTimeString.bind(this)\r\n            , 5000)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this._timer)\r\n    }\r\n\r\n    _updateTimeString() {\r\n        const comment = this.props.comment;\r\n        const duration = (+Date.now() - comment.createdTime) / 1000;\r\n        this.setState({\r\n            timeString: duration > 60\r\n                ? `${Math.round(duration / 60)} 分钟前`\r\n                : `${Math.round(Math.max(duration, 1))} 秒前`\r\n        })\r\n    }\r\n\r\n    handleDeleteComment() {\r\n        if (this.props.onDeleteComment) {\r\n            this.props.onDeleteComment(this.props.index)\r\n        }\r\n    }\r\n\r\n    _getProcessedContent(content) {\r\n        return content\r\n            .replace(/&/g, \"&amp;\")\r\n            .replace(/</g, \"&lt;\")\r\n            .replace(/>/g, \"&gt;\")\r\n            .replace(/\"/g, \"quot;\")\r\n            .replace(/'/g, \"&#039;\")\r\n            .replace(/`([\\S\\s]+?)`/g, '<code>$1</code>')\r\n    }\r\n\r\n    render() {\r\n        const comment = this.props.comment;\r\n        return (\r\n            <div className=\"comment\">\r\n                <div className=\"comment-user\">\r\n                    <span className=\"comment-username\">{comment.username}</span>：\r\n                </div>\r\n                <p dangerouslySetInnerHTML={{\r\n                    __html: this._getProcessedContent(comment.content)\r\n                }}/>\r\n                <span className=\"comment-createdtime\">\r\n                    {this.state.timeString}\r\n                </span>\r\n                <span onClick={this.handleDeleteComment.bind(this)} className=\"comment-delete\">删除</span>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport Comment from './Comment';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class CommentList extends Component {\r\n    static propTypes = {\r\n        comments: PropTypes.array,\r\n        onDeleteComment: PropTypes.func\r\n    };\r\n\r\n    static defaultProps = {\r\n        comments: []\r\n    };\r\n\r\n    handleDeleteComment(index) {\r\n        if (this.props.onDeleteComment) {\r\n            this.props.onDeleteComment(index)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.props.comments.map((comment, index) =>\r\n                    <Comment\r\n                        comment={comment}\r\n                        key={index}\r\n                        index={index}\r\n                        onDeleteComment={this.handleDeleteComment.bind(this)}/>\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {connect} from 'react-redux';\r\nimport CommentList from '../components/CommentList';\r\nimport {initComments, deleteComment} from \"../reducers/comments\";\r\n\r\nclass CommentListContainer extends Component {\r\n    static propTypes = {\r\n        comments: PropTypes.array,\r\n        initComments: PropTypes.func,\r\n        onDeleteComment: PropTypes.func\r\n    };\r\n\r\n    componentWillMount() {\r\n        this._loadComments();\r\n    }\r\n\r\n    _loadComments() {\r\n        let comments = localStorage.getItem('comments');\r\n        comments = comments ? JSON.parse(comments) : [];\r\n        this.props.initComments(comments);\r\n    }\r\n\r\n    handleDeleteComment(index) {\r\n        const {comments} = this.props;\r\n        const newComments = [\r\n            ...comments.slice(0, index),\r\n            ...comments.slice(index + 1)\r\n        ];\r\n        localStorage.setItem('comments', JSON.stringify(newComments));\r\n        if (this.props.onDeleteComment) {\r\n            this.props.onDeleteComment(index)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <CommentList\r\n                comments={this.props.comments}\r\n                onDeleteComment={this.handleDeleteComment.bind(this)}/>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        comments: state.comments\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        initComments: (comments) => {\r\n            dispatch(initComments(comments))\r\n        },\r\n        onDeleteComment: (commentIndex) => {\r\n            dispatch(deleteComment(commentIndex))\r\n        }\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentListContainer)","import React, {Component} from 'react';\r\nimport CommentInput from './CommentInput';\r\nimport CommentList from './CommentList';\r\n\r\nexport default class CommentApp extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"wrapper\">\r\n                <CommentInput/>\r\n                <CommentList/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {createStore} from 'redux'\nimport {Provider} from 'react-redux'\nimport CommentApp from './containers/CommentApp'\nimport commentsReducer from './reducers/comments'\nimport './index.css'\n\nconst store = createStore(commentsReducer);\n\nReactDOM.render(\n    <Provider store={store}>\n        <CommentApp/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}